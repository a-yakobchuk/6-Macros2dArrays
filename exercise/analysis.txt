
4)THE MACROS FROM ORIGINAL C 
#define MACRO1(N)                             \
    { int i ## N;                             \
      printf("Looping variable 'i%s'\n", #N); \
      for(i ## N=0; i ## N < N; i ## N++) {   \
      printf("%d\n",i ## N);                  \
    } /* End for */ } /* End macro */


#if TEST==1
int main(int argc, char *argv[]) {
   int i = 2;
   /* The looping variable will be _t_3  */
   MACRO1(3);
   MACRO1(i);
   return(0);
}

THE OUTPUT IN EXERCISE.TXT

int main(int argc, char *argv[]) {
   int i = 2;
   { int i3; printf("Looping variable 'i%s'\n", "3"); for(i3=0; i3 < 3; i3++) { printf("%d\n",i3); } };
   { int ii; printf("Looping variable 'i%s'\n", "i"); for(ii=0; ii < i; ii++) { printf("%d\n",ii); } };
   return(0);

This demonstrates how macros just result in text which the compiler can treat as code. 

5) the "#if TEST==1" macro is a conditional statement that determines which macro will be ran according to what the value of TEST is in the command line.

7) the bad code:

#define f1()                     \
  {int _var = 10;                 \
  printf("var in f1: %d\n", var);}

the problem is that there is a simple typo, there is a missing '_' before var so it should've been '_var'

